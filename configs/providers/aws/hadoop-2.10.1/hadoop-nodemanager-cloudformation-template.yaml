AWSTemplateFormatVersion: 2010-09-09
Description: NodeManager of hadoop-2.10.1 cluster.
Parameters:
  Ec2KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to EC2 instances.
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be the name of an existing EC2 KeyPair.
  InstanceType:
    Type: String
    Description: EC2 instance type.
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
  Ec2VolumeType:
    Type: String
    Default: gp2
    AllowedValues:
      - gp2
      - gp3
      - io1
      - io2
      - sc1
      - st1
      - standard
  Ec2VolumeSize:
    Type: Number
    Default: 30
    MinValue: 30
    MaxValue: 100
  S3Home:
    Description: S3 path for all needed jars and tars.
    Type: String
    Default: s3://chenyi-ap-southeast-1
  HadoopVersion:
    Description: Hadoop version.
    Type: String
    Default: 2.10.1
  HadoopFsS3Bucket:
    Description: S3 bucket for hadoop-2.10.1 file system.
    Type: String
    Default: chenyi-ap-southeast-1
  HadoopFsS3aEndpoint:
    Description: S3a endpoint for hadoop-2.10.1 file system.
    Type: String
    Default: s3.ap-southeast-1.amazonaws.com
Mappings:
  AWSInstanceType2Arch:
    t1.micro:
      Arch: HVM64
    t2.nano:
      Arch: HVM64
    t2.micro:
      Arch: HVM64
    t2.small:
      Arch: HVM64
    t2.medium:
      Arch: HVM64
    t2.large:
      Arch: HVM64
    m1.small:
      Arch: HVM64
    m1.medium:
      Arch: HVM64
    m1.large:
      Arch: HVM64
    m1.xlarge:
      Arch: HVM64
    m2.xlarge:
      Arch: HVM64
    m2.2xlarge:
      Arch: HVM64
    m2.4xlarge:
      Arch: HVM64
    m3.medium:
      Arch: HVM64
    m3.large:
      Arch: HVM64
    m3.xlarge:
      Arch: HVM64
    m3.2xlarge:
      Arch: HVM64
    m4.large:
      Arch: HVM64
    m4.xlarge:
      Arch: HVM64
    m4.2xlarge:
      Arch: HVM64
    m4.4xlarge:
      Arch: HVM64
    m4.10xlarge:
      Arch: HVM64
    m5.large:
      Arch: HVM64
    m5.xlarge:
      Arch: HVM64
    m5.2xlarge:
      Arch: HVM64
    m5.4xlarge:
      Arch: HVM64
    m5.8xlarge:
      Arch: HVM64
    m5.12xlarge:
      Arch: HVM64
    m5.16xlarge:
      Arch: HVM64
    c1.medium:
      Arch: HVM64
    c1.xlarge:
      Arch: HVM64
    c3.large:
      Arch: HVM64
    c3.xlarge:
      Arch: HVM64
    c3.2xlarge:
      Arch: HVM64
    c3.4xlarge:
      Arch: HVM64
    c3.8xlarge:
      Arch: HVM64
    c4.large:
      Arch: HVM64
    c4.xlarge:
      Arch: HVM64
    c4.2xlarge:
      Arch: HVM64
    c4.4xlarge:
      Arch: HVM64
    c4.8xlarge:
      Arch: HVM64
    g2.2xlarge:
      Arch: HVMG2
    g2.8xlarge:
      Arch: HVMG2
    r3.large:
      Arch: HVM64
    r3.xlarge:
      Arch: HVM64
    r3.2xlarge:
      Arch: HVM64
    r3.4xlarge:
      Arch: HVM64
    r3.8xlarge:
      Arch: HVM64
    i2.xlarge:
      Arch: HVM64
    i2.2xlarge:
      Arch: HVM64
    i2.4xlarge:
      Arch: HVM64
    i2.8xlarge:
      Arch: HVM64
    d2.xlarge:
      Arch: HVM64
    d2.2xlarge:
      Arch: HVM64
    d2.4xlarge:
      Arch: HVM64
    d2.8xlarge:
      Arch: HVM64
    hi1.4xlarge:
      Arch: HVM64
    hs1.8xlarge:
      Arch: HVM64
    cr1.8xlarge:
      Arch: HVM64
    cc2.8xlarge:
      Arch: HVM64
  AWSRegionArch2AMI:
    ap-southeast-1:
      HVM64: ami-07191cf2912e097a6
      HVMG2: ami-0e46ce0d6a87dc979
    ap-southeast-2:
      HVM64: ami-0ae99b503e8694028
      HVMG2: ami-0c0ab057a101d8ff2
    ca-central-1:
      HVM64: ami-0803e21a2ec22f953
      HVMG2: NOT_SUPPORTED
    cn-north-1:
      HVM64: ami-07a3f215cc90c889c
      HVMG2: NOT_SUPPORTED
    cn-northwest-1:
      HVM64: ami-0a3b3b10f714a0ff4
      HVMG2: NOT_SUPPORTED
    eu-central-1:
      HVM64: ami-0474863011a7d1541
      HVMG2: ami-0aa1822e3eb913a11
    eu-north-1:
      HVM64: ami-0de4b8910494dba0f
      HVMG2: ami-32d55b4c
    eu-south-1:
      HVM64: ami-08427144fe9ebdef6
      HVMG2: NOT_SUPPORTED
    eu-west-1:
      HVM64: ami-015232c01a82b847b
      HVMG2: ami-0d5299b1c6112c3c7
    eu-west-2:
      HVM64: ami-0765d48d7e15beb93
      HVMG2: NOT_SUPPORTED
    eu-west-3:
      HVM64: ami-0caf07637eda19d9c
      HVMG2: NOT_SUPPORTED
    me-south-1:
      HVM64: ami-0744743d80915b497
      HVMG2: NOT_SUPPORTED
    sa-east-1:
      HVM64: ami-0a52e8a6018e92bb0
      HVMG2: NOT_SUPPORTED
    us-east-1:
      HVM64: ami-032930428bf1abbff
      HVMG2: ami-0aeb704d503081ea6
    us-east-2:
      HVM64: ami-027cab9a7bf0155df
      HVMG2: NOT_SUPPORTED
    us-west-1:
      HVM64: ami-088c153f74339f34c
      HVMG2: ami-0a7fc72dc0e51aa77
    us-west-2:
      HVM64: ami-01fee56b22f308154
      HVMG2: ami-0fe84a5b4563d8f27
Resources:
  Ec2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId:
        Fn::FindInMap:
          - AWSRegionArch2AMI
          - !Ref AWS::Region
          - Fn::FindInMap:
              - AWSInstanceType2Arch
              - !Ref InstanceType
              - Arch
      InstanceType: !Ref InstanceType
      IamInstanceProfile:
        Fn::ImportValue: !Join [ ":", [ "Raven", "IAM", "InstanceProfile" ] ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref Ec2VolumeSize
            VolumeType: !Ref Ec2VolumeType
            DeleteOnTermination: true
      NetworkInterfaces:
        - DeviceIndex: 0
          AssociatePublicIpAddress: True
          DeleteOnTermination: True
          SubnetId:
            Fn::ImportValue: !Join [ ":", [ "Raven", "EC2", "Subnet01" ] ]
          GroupSet:
            - Fn::ImportValue: !Join [ ":", [ "Raven", "EC2", "SecurityGroup" ] ]
      Tags:
        - Key: Name
          Value: Hadoop NodeManager
      KeyName: !Ref Ec2KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
            - ""
            - - |
                #!/bin/bash

                set -e

                HOME=/root
                cd ${HOME}

                function info() {
                    log="$(date '+%Y-%m-%d %H:%M:%S') - INFO - $*"
                    echo -e "\033[32m${log}\033[0m"
                    echo "${log}" >> shell.log
                }

                function warning() {
                    log="$(date '+%Y-%m-%d %H:%M:%S') - WARNING - $*"
                    echo -e "\033[33m${log}\033[0m"
                    echo "${log}" >> shell.log
                }

                function error() {
                    log="$(date '+%Y-%m-%d %H:%M:%S') - ERROR - $*"
                    echo -e "\033[31m${log}\033[0m"
                    echo "${log}" >> shell.log
                }

                function logging() {
                    level=$1
                    shift
                    case $level in
                    "info")
                        info "$*";;
                    "warning")
                        warning "$*";;
                    "error")
                        error "$*";;
                    *)
                        echo "$*";;
                    esac
                }

                if java -version &> /dev/null; then
                    logging warning "Java has already been installed."
                    exit
                else
                    logging info "Java has not been installed."
                fi

                logging info "Installing Java SE 8..."
                JDK_PACKAGE=jdk-8u301-linux-x64.tar.gz
                JDK_DECOMPRESS_NAME=jdk1.8.0_301
              - Fn::Sub:
                  - |
                    S3_HOME=${S3Home}
                  - S3Home: !Ref S3Home
              - |
                if [[ -f ${JDK_PACKAGE} ]]; then
                    logging info "${JDK_PACKAGE} has already been downloaded."
                else
                    logging info "Downloading ${JDK_PACKAGE} from ${S3_HOME}/tars/${JDK_PACKAGE}..."
                    aws s3 cp ${S3_HOME}/tars/${JDK_PACKAGE} "${HOME}"
                    if [[ ! -f ${JDK_PACKAGE} ]]; then
                        logging error "Failed to download ${JDK_PACKAGE}."
                        exit 1
                    fi
                fi

                JAVA_HOME=/usr/local/java/${JDK_DECOMPRESS_NAME}
                JRE_HOME=${JAVA_HOME}/jre
                if [[ -d ${JAVA_HOME} ]]; then
                    logging info "${JDK_PACKAGE} has already been decompressed."
                else
                    logging info "Decompressing ${JDK_PACKAGE}..."
                    mkdir -p /usr/local/java
                    if ! tar -zxf ${JDK_PACKAGE} -C /usr/local/java; then
                	    logging error "Failed to decompress ${JDK_PACKAGE}."
                	    exit 1
                    fi
                fi

                logging info "Setting up environment variables for java..."
                cat << EOF >> "${HOME}"/.bash_profile

                # Java
                export JAVA_HOME=${JAVA_HOME}
                export JRE_HOME=\${JAVA_HOME}/jre
                export CLASSPATH=.:\${JAVA_HOME}/lib:\${JRE_HOME}/lib
                export PATH=\${PATH}:\${JAVA_HOME}/bin
                EOF
                source "${HOME}"/.bash_profile

                if java -version &> /dev/null; then
                    logging info "Successfully installed java."
                else
                    logging error "Failed to install java."
                    exit 1
                fi
              - |
                if hadoop version &> /dev/null; then
                    logging warning "Hadoop already installed."
                    exit
                else
                    logging info "Hadoop has not been installed."
                fi
              - Fn::Sub:
                  - |
                    FS_S3_BUCKET=${HadoopFsS3Bucket}
                    FS_S3A_ENDPOINT=${HadoopFsS3aEndpoint}

                    HADOOP_VERSION=${HadoopVersion}
                  - HadoopVersion: !Ref HadoopVersion
                    HadoopFsS3Bucket: !Ref HadoopFsS3Bucket
                    HadoopFsS3aEndpoint: !Ref HadoopFsS3aEndpoint
              - |
                HADOOP_PACKAGE=hadoop-${HADOOP_VERSION}.tar.gz

                logging info "Start installing hadoop ${HADOOP_VERSION}..."
                if [[ -f ${HADOOP_PACKAGE} ]]; then
                    logging info "${HADOOP_PACKAGE} has already been downloaded."
                else
                    logging info "Downloading ${HADOOP_PACKAGE} from AWS ${S3_HOME}/tars/${HADOOP_PACKAGE}..."
                    if ! aws s3 cp ${S3_HOME}/tars/${HADOOP_PACKAGE} "${HOME}"; then
                        logging error "Failed to download ${HADOOP_PACKAGE}."
                        exit 1
                    fi
                fi

                HADOOP_HOME=/usr/local/hadoop/hadoop-${HADOOP_VERSION}
                if [[ -d ${HADOOP_HOME} ]]; then
                    logging info "${HADOOP_PACKAGE} has already been decompressed."
                else
                    logging info "Decompressing ${HADOOP_PACKAGE}..."
                    mkdir -p /usr/local/hadoop
                    if ! tar -zxf ${HADOOP_PACKAGE} -C /usr/local/hadoop; then
                        logging error "Failed to decompress ${HADOOP_PACKAGE}."
                        exit 1
                    fi
                fi

                ln -s $HADOOP_HOME/share/hadoop/tools/lib/*aws* $HADOOP_HOME/share/hadoop/common/lib/

                logging info "Modifying hadoop configurations..."
                cat << EOF > ${HADOOP_HOME}/etc/hadoop/core-site.xml
                <?xml version="1.0" encoding="UTF-8"?>
                <?xml-stylesheet type="text/xsl" href="configuration.xsl"?>
                <configuration>
                	<property>
                    <name>fs.default.name</name>
                    <value>s3a://${FS_S3_BUCKET}</value>
                	</property>
                  <property>
                    <name>fs.s3a.endpoint</name>
                    <value>${FS_S3A_ENDPOINT}</value>
                  </property>
                </configuration>
                EOF

                logging info "Setting up environment variables for hadoop..."
                cat << EOF >> "${HOME}"/.bash_profile

                # Hadoop
                export HADOOP_HOME=${HADOOP_HOME}
                export PATH=\${PATH}:\${HADOOP_HOME}/bin
                EOF
                source "${HOME}"/.bash_profile

                if hadoop version &> /dev/null; then
                    logging info "Successfully installed hadoop."
                else
                    logging error "Failed to install hadoop."
                    exit 1
                fi
              - |
                logging info "Starting yarn NodeManager..."
                if ${HADOOP_HOME}/sbin/yarn-deamon.sh start nodemanager; then
                    logging info "Successfully start Yarn NodeManager."
                else
                    logging error "Failed to start Yarn NodeManager."
                    exit 1
                fi
Outputs:
  Ec2InstanceId:
    Description: Unique ID of EC2 instance.
    Value: !Ref Ec2Instance
  Ec2InstanceAvailabilityZone:
    Description: The Availability Zone where the specified instance is launched.
    Value: !GetAtt Ec2Instance.AvailabilityZone
  Ec2InstancePublicIp:
    Description: Public IP of EC2 instance.
    Value: !GetAtt Ec2Instance.PublicIp
  Ec2InstancePublicDnsName:
    Description: The public DNS name of the specified instance.
    Value: !GetAtt Ec2Instance.PublicDnsName
  Ec2InstancePrivateIp:
    Description: Private IP of EC2 instance.
    Value: !GetAtt Ec2Instance.PrivateIp
